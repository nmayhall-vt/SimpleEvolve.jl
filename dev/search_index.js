var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SimpleEvolve","category":"page"},{"location":"#SimpleEvolve","page":"Home","title":"SimpleEvolve","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SimpleEvolve.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SimpleEvolve]","category":"page"},{"location":"#SimpleEvolve.MultiChannelSignal","page":"Home","title":"SimpleEvolve.MultiChannelSignal","text":"MultiChannelSignal \nA struct to represent a multi-channel signal with multiple digitized signals.\n\n\n\n\n\n","category":"type"},{"location":"#SimpleEvolve.amplitude_ti-Tuple{DigitizedSignal, Any}","page":"Home","title":"SimpleEvolve.amplitude_ti","text":"amplitude_ti(signal::DigitizedSignal, t)     Calculate the amplitude of a signal at time t using trigonometric interpolation     Args:         signal: Input digitized signal         t: Time at which to evaluate the signal     Returns:         Amplitude of the signal at time t\n\n\n\n\n\n","category":"method"},{"location":"#SimpleEvolve.amplitude_ws-Tuple{DigitizedSignal, Any}","page":"Home","title":"SimpleEvolve.amplitude_ws","text":"amplitudews(signal::DigitizedSignal, t; windowradius=8)     Calculate the amplitude of a signal at time t using Whittaker-Shannon interpolation     from the signal samples of reduced size     Args:         signal: Input digitized signal         t: Time at which to evaluate the signal         window_radius: Number of samples on each side of the center sample (default is 8)     Returns:         Amplitude of the signal at time t\n\n\n\n\n\n","category":"method"},{"location":"#SimpleEvolve.costfunction_direct_exponentiation-NTuple{8, Any}","page":"Home","title":"SimpleEvolve.costfunction_direct_exponentiation","text":"costfunctiondirectexponentiation(ψ0,                                     eigvals,                                    signal,                                     nsites,                                     drives,                                     T,                                      ntrottersteps,                                     Costham)\n\ncost_function for the system using direct exponentiation\nargs:\n    ψ0     : Initial state\n    eigvals: Eigenvalues of the Hamiltonian\n    signal : Signal to be evolved\n    n_sites: Number of sites in the system\n    drives : External drives applied to the system # annhilation operators in case of qubits\n    T      : Total time for evolution\n    n_trotter_steps: Number of Trotter steps for exponentiation\n    Cost_ham: Hamiltonian used for cost function calculation\nreturns:\n    cost   : Cost function value\n    ψ_direct: Evolved state\n\n\n\n\n\n","category":"method"},{"location":"#SimpleEvolve.infidelity-Tuple{Any, Any}","page":"Home","title":"SimpleEvolve.infidelity","text":"infidelity(ψ, φ)     Function to compute the infidelity between two state vectors     args:         ψ : First state vector         φ : Second state vector     returns:         infidelity value\n\n\n\n\n\n","category":"method"},{"location":"#SimpleEvolve.projector-Tuple{Integer, Integer, Integer}","page":"Home","title":"SimpleEvolve.projector","text":"projector(n_sites::Integer, n_levels::Integer, n_levels0::Integer)\n\nProject a Hilbert space of n_sites n_levels0-level qubits onto that of n_sites n_levels-level qubits\n\nReturns an (n_sites^n_levels, n_sites^n_levels) shaped matrix Π. To perform the projection on a vector, use ψ ← Πψ. To perform the projection on a matrix, use A ← ΠAΠ'.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleEvolve.reconstruct-Tuple{DigitizedSignal, Int64, Symbol}","page":"Home","title":"SimpleEvolve.reconstruct","text":"reconstruct(signal::DigitizedSignal,             outputsamples::Int,             method::Symbol;             secondarymethod=:polynomial,             weight=0.5,             polyorder=4,             windowradius=8,             filtercutoffratio=0.8)     Reconstruct a signal using specified interpolation methods.     Args:         signal: Input digitized signal         output_samples: Desired output length         method: Interpolation method to use     Returns:         Reconstructed signal with anti-aliasing\n\n\n\n\n\n","category":"method"},{"location":"#SimpleEvolve.reconstruct_gradient_ti-Tuple{DigitizedSignal, Any}","page":"Home","title":"SimpleEvolve.reconstruct_gradient_ti","text":"reconstructgradientti(signal::DigitizedSignal, output_samples::Int)\n\nReconstruct a signal using trigonometric interpolation.\nArgs:\n    signal: Input digitized signal\n    output_samples: Desired output length\nReturns:\n    Reconstructed signal with anti-aliasing\n\n\n\n\n\n","category":"method"}]
}
